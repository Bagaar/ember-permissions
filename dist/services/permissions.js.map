{"version":3,"file":"permissions.js","sources":["../../src/services/permissions.ts"],"sourcesContent":["import { assert } from '@ember/debug';\nimport { action } from '@ember/object';\nimport type RouterService from '@ember/routing/router-service';\nimport Service, { service } from '@ember/service';\nimport { tracked } from '@glimmer/tracking';\n\nexport type CanAccessRouteHandler = (service: PermissionsService) => boolean;\nexport type Permissions = string[];\nexport type Transition = ReturnType<RouterService['transitionTo']>;\n\ntype RouteAccessDeniedHandler = (deniedTransition: Transition) => void;\ntype RoutePermissions = {\n  [routeName: string]: Permissions | CanAccessRouteHandler;\n};\n\nexport default class PermissionsService extends Service {\n  @service('router') declare routerService: RouterService;\n\n  @tracked permissions: Permissions = [];\n  @tracked routePermissions: RoutePermissions = {};\n\n  #isRouteValidationEnabled = false;\n  #routeAccessDeniedHandlers = new Set<RouteAccessDeniedHandler>();\n\n  addRouteAccessDeniedHandler(handler: RouteAccessDeniedHandler) {\n    this.#routeAccessDeniedHandlers.add(handler);\n  }\n\n  removeRouteAccessDeniedHandler(handler: RouteAccessDeniedHandler) {\n    this.#routeAccessDeniedHandlers.delete(handler);\n  }\n\n  setPermissions(permissions: Permissions): void {\n    assert(\n      '`permissions` is required and should be an array.',\n      permissions && Array.isArray(permissions),\n    );\n\n    this.permissions = permissions;\n  }\n\n  setRoutePermissions(routePermissions: RoutePermissions): void {\n    assert(\n      '`routePermissions` is required and should be an object.',\n      routePermissions && typeof routePermissions === 'object',\n    );\n\n    this.routePermissions = routePermissions;\n  }\n\n  hasPermissions(permissions: Permissions): boolean {\n    assert(\n      '`permissions` is required and should be an array.',\n      permissions && Array.isArray(permissions),\n    );\n\n    return permissions.every((permission) => {\n      return this.permissions.includes(permission);\n    });\n  }\n\n  hasSomePermissions(permissions: Permissions): boolean {\n    assert(\n      '`permissions` is required and should be an array.',\n      permissions && Array.isArray(permissions),\n    );\n\n    return permissions.some((permission) => {\n      return this.permissions.includes(permission);\n    });\n  }\n\n  canAccessRoute(routeName: string): boolean {\n    assert(\n      '`routeName` is required and should be a string.',\n      routeName && typeof routeName === 'string',\n    );\n\n    const routeNameSegments = routeName.split('.');\n\n    for (let index = 0; index < routeNameSegments.length; index++) {\n      const permissionsOrHandler =\n        this.routePermissions[routeNameSegments.slice(0, index + 1).join('.')];\n\n      if (\n        Array.isArray(permissionsOrHandler) &&\n        this.hasPermissions(permissionsOrHandler) === false\n      ) {\n        return false;\n      } else if (\n        typeof permissionsOrHandler === 'function' &&\n        permissionsOrHandler(this) === false\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  enableRouteValidation(initialTransition?: Transition): void {\n    if (this.#isRouteValidationEnabled === true) {\n      return;\n    }\n\n    this.#isRouteValidationEnabled = true;\n\n    if (initialTransition) {\n      this.validateTransition(initialTransition);\n    }\n\n    this.routerService.on('routeWillChange', this.validateTransition);\n  }\n\n  @action\n  validateTransition(transition: Transition): void {\n    const routeName = transition?.to?.name;\n\n    if (routeName && this.canAccessRoute(routeName) === false) {\n      this.#routeAccessDeniedHandlers.forEach((handler) => handler(transition));\n    }\n  }\n\n  willDestroy(): void {\n    if (this.#isRouteValidationEnabled === true) {\n      this.routerService.off('routeWillChange', this.validateTransition);\n    }\n  }\n}\n\ndeclare module '@ember/service' {\n  interface Registry {\n    permissions: PermissionsService;\n  }\n}\n"],"names":["PermissionsService","Service","g","this","prototype","service","i","void 0","tracked","Set","addRouteAccessDeniedHandler","handler","add","removeRouteAccessDeniedHandler","delete","setPermissions","permissions","assert","Array","isArray","setRoutePermissions","routePermissions","hasPermissions","every","permission","includes","hasSomePermissions","some","canAccessRoute","routeName","routeNameSegments","split","index","length","permissionsOrHandler","slice","join","enableRouteValidation","initialTransition","validateTransition","routerService","on","transition","to","name","forEach","n","action","willDestroy","off"],"mappings":"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"}